
#include "big-numbers.h"

#include <cstdio>

#include "ansi.h"
#include "base/logging.h"
#include "big-overloads.h"
#include "big.h"

#if BIG_USE_GMP
const char *EPS =
  "0.000000000000000000000000000000000000000000000000000"
  "00000000000000000000000000000000000000000000000000000"
  "00000000000000000000000000000000000000000000000000000"
  "00000000000000000000000000000000000000000000000000000"
  "00000000000000000000000000000000000000000000000000000"
  "00000000000000000000000000000000000000000000000000001";
#else
const char *EPS = "0.0000000000000000000000000001";
#endif


static void TestPi() {
  BigRat epsilon = BigRat::FromDecimal(EPS);

  BigRat computed_pi = BigNumbers::Pi(epsilon);

  BigRat reference_pi = BigRat::FromDecimal(
      "3.141592653589793238462643383279502884197169399375"
      "10582097494459230781640628620899862803482534211706"
      "79821480865132823066470938446095505822317253594081"
      "28481117450284102701938521105559644622948954930381"
      "96442881097566593344612847564823378678316527120190"
      "91456485669234603486104543266482133936072602491412"
      "73724587006606315588174881520920962829254091715364"
      "36789259036001133053054882046652138414695194151160"
      "94330572703657595919530921861173819326117931051185"
      "48074462379962749567351885752724891227938183011949"
      "12983367336244065664308602139494639522473719070217"
      "98609437027705392171762931767523846748184676694051"
      "32000568127145263560827785771342757789609173637178"
      "72146844090122495343014654958537105079227968925892"
      "35420199561121290219608640344181598136297747713099"
      "60518707211349999998372978049951059731732816096318"
      "59502445945534690830264252230825334468503526193118"
      "81710100031378387528865875332083814206171776691473");
  BigRat err = computed_pi - reference_pi;

  CHECK(BigRat::Abs(err) <= epsilon) <<
    "Computed: " << computed_pi.ToString() <<
    "\nWhich is approximately: " <<
    std::format("{:.17g}", computed_pi.ToDouble()) <<
    "\n\nThe error is: " << err.ToString() <<
    "\nWhich is approximately: " <<
    std::format("{:.17g}", err.ToDouble()) <<
    "\n\nAnd epsilon is: " << epsilon.ToString() <<
    "\nWhich is approximately: " <<
    std::format("{:.17g}", epsilon.ToDouble());
}


int main(int argc, char **argv) {
  ANSI::Init();

  TestPi();

  printf("OK\n");
  return 0;
}
