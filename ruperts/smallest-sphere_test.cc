
#include "auto-histo.h"
#include "base/stringprintf.h"
#include "polyhedra.h"
#include "smallest-sphere.h"

#include <cstdint>
#include <cstdio>
#include <format>
#include <string>
#include <vector>

#include "ansi.h"
#include "arcfour.h"
#include "base/logging.h"
#include "periodically.h"
#include "randutil.h"
#include "status-bar.h"
#include "timer.h"
#include "yocto_matht.h"

using namespace yocto;

using vec3 = vec<double, 3>;
using frame3 = frame<double, 3>;
using quat4 = quat<double, 4>;

static void TestRandom() {
  // Only use this for generating the points
  // to test, so that we can repeat failures if needed.
  ArcFour rc_seq("test");
  // ... but the algorithm also needs an RNG.
  ArcFour rc_algo("algo");

  double total_sec = 0.0;
  Periodically status_per(1.0);
  StatusBar status(1);
  // XXX increase limit after fixing bugs
  int LIMIT = 100000;
  for (int i = 0; i < LIMIT; i++) {
    int n = RandTo(&rc_seq, 100);
    std::vector<vec3> pts;
    pts.reserve(n);
    for (int j = 0; j < n; j++) {
      double x = RandDouble(&rc_seq) * 4 - 2.0;
      double y = RandDouble(&rc_seq) * 4 - 2.0;
      double z = RandDouble(&rc_seq) * 4 - 2.0;
      pts.emplace_back(x, y, z);
    }

    Timer run_timer;
    const auto &[o, r] = SmallestSphere::Smallest(&rc_algo, pts);
    total_sec += run_timer.Seconds();
    CHECK(r >= 0.0);
    for (const vec3 &v : pts) {
      double vr = distance(v, o);
      // We allow it to be slightly outside to account for numerical
      // issues.
      CHECK(r - vr > -1.0e-10) << "Want " << vr << " <= " << r;
    }

    if (i % 1024 == 0) {
      status_per.RunIf([&]() {
          status.Progressf(i, LIMIT, "Testing random point clouds");
        });
    }
  }

  printf("Random OK (avg time: %s).\n",
         ANSI::Time(total_sec / LIMIT).c_str());
}

// Three points is a special case, which is a bit hard to encounter
// with fully random points. So test it explicitly.
static void TestRandom3() {
  // Only use this for generating the points
  // to test, so that we can repeat failures if needed.
  ArcFour rc_seq("test");
  // ... but the algorithm also needs an RNG.
  ArcFour rc_algo("algo");

  Periodically status_per(1.0);
  StatusBar status(1);
  static constexpr int LIMIT = 10'000'000;
  for (int i = 0; i < LIMIT; i++) {
    std::vector<vec3> pts;
    pts.reserve(3);
    for (int j = 0; j < 3; j++) {
      double x = RandDouble(&rc_seq) * 4 - 2.0;
      double y = RandDouble(&rc_seq) * 4 - 2.0;
      double z = RandDouble(&rc_seq) * 4 - 2.0;
      pts.emplace_back(x, y, z);
    }

    const auto &[o, r] = SmallestSphere::Smallest(&rc_algo, pts);
    CHECK(r >= 0.0);
    for (const vec3 &v : pts) {
      double vr = distance(v, o);
      // We allow it to be slightly outside to account for numerical
      // issues.
      CHECK(r - vr > -1.0e-10) << "Want " << vr << " <= " << r;
    }

    status_per.RunIf([&]() {
        status.Progressf(i, LIMIT, "Random3");
      });
  }

  printf("Random3 OK.\n");
}

static void TestRandomCubes() {
  ArcFour rc("test");

  constexpr int64_t LIMIT = 10'000'000;
  double total_sec = 0.0;
  Periodically status_per(1.0);
  StatusBar status(1);
  for (int64_t i = 0; i < LIMIT; i++) {
    // if (i == 20356) SmallestSphere::verbose = true;

    // int num_cubes = 2 + RandTo(&rc, 3);
    const int num_cubes = 1;
    std::vector<vec3> all_points;
    all_points.reserve(num_cubes * 8);

    auto ShowPoints = [&all_points]() {
        std::string ret;
        AppendFormat(&ret, "There are {} points:\n",
                     (int)all_points.size());
        for (const vec3 &v : all_points) {
          AppendFormat(&ret, "({}, {}, {})\n", v.x, v.y, v.z);
        }
        return ret;
      };

    // Make a unit cube.
    for (int cube_idx = 0; cube_idx < num_cubes; cube_idx++) {
      frame3 frame = yocto::rotation_frame(RandomQuaternion(&rc));
      frame.o.x = RandDouble(&rc) * num_cubes * 2 - num_cubes;
      frame.o.y = RandDouble(&rc) * num_cubes * 2 - num_cubes;
      frame.o.z = RandDouble(&rc) * num_cubes * 2 - num_cubes;

      auto Vertex = [&all_points, &frame](double x, double y, double z) {
          all_points.push_back(
              transform_point(frame, vec3{.x = x, .y = y, .z = z}));
        };

      for (uint8_t b = 0b000; b < 0b1000; b++) {
        Vertex(!!(b & 0b100), !!(b & 0b010), !! (b & 0b001));
      }
    }

    Timer run_timer;
    const auto &[center, radius] = SmallestSphere::Smallest(&rc, all_points);
    total_sec += run_timer.Seconds();

    // Now check it.
    for (const vec3 &v : all_points) {
      double d = distance(center, v);
      CHECK(radius - d > -1.0e-10) << "Want " << d << " <= " << radius << "\n"
                                   << "On iter " << i << "\nPoints:\n"
                                   << ShowPoints()
                                   // << "Got sphere:\n"
                                   << std::format("sphere(({}, {}, {}), {})\n",
                                                  center.x,
                                                  center.y,
                                                  center.z,
                                                  radius);
    }

    if (i % 1024 == 0) {
      status_per.RunIf([&]() {
          status.Progressf(i, LIMIT, "cubes");
        });
    }
  }

  printf("Random cubes OK (avg time: %s).\n",
         ANSI::Time(total_sec / LIMIT).c_str());
}

static void SlowWithHisto(const std::vector<vec3> &pts) {
  AutoHisto histo(100000);
  ArcFour rc("slow");
  for (int i = 0; i < 1000; i++) {
    Timer timer;
    const auto &[center, radius] = SmallestSphere::Smallest(&rc, pts);
    double s = timer.Seconds();
    if (s > 0.100) {
      printf("Got %.17g in %s%s\n", radius, ANSI::Time(s).c_str(),
             s > 1.0 ? " " ARED("(slow)") : "");
    }

    // Now check it.
    for (const vec3 &v : pts) {
      double d = distance(center, v);
      CHECK(radius - d > -1.0e-10) << "Want " << d << " <= " << radius << "\n"
                                   << "On iter " << i
                                   << "Got sphere:\n"
                                   << std::format("sphere(({}, {}, {}), {})\n",
                                                  center.x,
                                                  center.y,
                                                  center.z,
                                                  radius);
    }

    histo.Observe(s);
  }

  printf("%s\n", histo.SimpleANSI(14).c_str());
}

static void TestSlow() {
  // From cube packing. This set of points has some very bad
  // orderings that will take minutes, if unlucky.
  std::vector<vec3> pts = {
    {0.96906665666437619, 1.53745322972236, 2.1830999374877451},
    {1.8408122085412375, 2.0206211783643289, 2.1018077103807378},
    {1.6024404198645372, 2.2939024751675552, 1.169876262697692},
    {0.73069486798767591, 1.8107345265255863, 1.2511684898046997},
    {1.3971304172725088, 0.7056683619694909, 1.8296945744393542},
    {2.2688759691493701, 1.1888363106114603, 1.7484023473323465},
    {2.0305041804726698, 1.4621176074146864, 0.81647089964930086},
    {1.1587586285958085, 0.97894965877271711, 0.89776312675630854},
    {0.91716235339277985, 1.8152577808538819, 2.0574838608823924},
    {1.9070355580760352, 1.9405752848420974, 2.1241664061567391},
    {1.9458691442221596, 2.1533457038241806, 1.1478361846675038},
    {0.95599593953890427, 2.0280281998359655, 1.0811536393931571},
    {1.0537016929148868, 0.84622513331286553, 1.8517346524695424},
    {2.043574897598142, 0.97154263730108092, 1.9184171977438891},
    {2.0824084837442665, 1.1843130562831641, 0.94208697625465365},
    {1.0925352790610112, 1.0589955522949488, 0.87540443098030696},
    {1.0211931067673317, 2.2214848276104986, 1.4898173659374996},
    {1.8310525173633756, 2.0735715201131502, 2.0574875065422553},
    {2.3129279212378098, 1.6894386085238353, 1.2699356026179702},
    {1.5030685106417661, 1.8373519160211838, 0.70226546201321438},
    {0.68664291589923621, 1.3101322286132109, 1.7296352345190762},
    {1.4965023264952801, 1.1622189211158624, 2.2973053751238321},
    {1.9783777303697145, 0.77808600952654783, 1.5097534711995468},
    {1.1685183197736706, 0.92599931702389626, 0.94208333059479088},
    {1.1967726938423631, 1.6492206012420703, 2.2971889643553176},
    {2.0764383945199016, 1.968402221593766, 1.9446108194269041},
    {1.6324141335947979, 2.2539891131980117, 1.0953272489666364},
    {0.75274843291725935, 1.9348074928463157, 1.4479053938950497},
    {1.3671567035422483, 0.74558172393903455, 1.9042435881704098},
    {2.2468224042197869, 1.0647633442907303, 1.5516654432419965},
    {1.8027981432946829, 1.3503502358949757, 0.70238187278172881},
    {0.92313244261714444, 1.03116861554328, 1.0549600177101421},
    {1.466852303346228, 1.8345251053601126, 2.2978234828288837},
    {2.2866171958474624, 1.4654088148782118, 1.859943721794737},
    {2.0576609807013346, 1.9550101166642115, 1.0185938440177122},
    {1.2378960882001007, 2.3241264071461121, 1.4564736050518587},
    {0.94190985643571123, 1.0445607204728344, 1.980976993119334},
    {1.7616747489369453, 0.6754444299909339, 1.5430972320851872},
    {1.5327185337908182, 1.1650457317769334, 0.70174735430816237},
    {0.71295364128958405, 1.5341620222588341, 1.139627115342309},
    {1.2975567504623062, 2.1712071350479132, 2.0080141509674849},
    {2.2262981210503194, 1.8764306088616667, 1.7831891831194531},
    {1.9630176382871862, 1.7789441511708894, 0.82340807371850422},
    {1.034276267699173, 2.0737206773571364, 1.0482330415665357},
    {1.03655319884986, 1.220626685966157, 2.1761627634185419},
    {1.9652945694378732, 0.92585015977991014, 1.9513377955705105},
    {1.70201408667474, 0.82836370208913301, 0.9915566861695615},
    {0.77327271608672676, 1.1231402282753797, 1.2163816540175929},
    {0.74159372668456824, 1.9166242815581986, 1.4624930512580296},
    {1.5760816683344436, 2.2726062040316193, 1.8830958878070492},
    {2.1056284061595609, 1.9655539252233405, 1.0923372959868787},
    {1.2711404645096855, 1.6095720027499194, 0.67173445943785881},
    {0.89394243097748516, 1.0340169119137057, 1.9072335411501677},
    {1.7284303726273607, 1.3899988343871268, 2.3278363776991875},
    {2.2579771104524777, 1.0829465555788476, 1.5370777858790168},
    {1.4234891688026023, 0.72696463310542681, 1.116474949329997},
    {0.6813841662586233, 1.7689199089590928, 1.411547012532399},
    {1.409294297195312, 2.27593206434456, 1.8731588793329781},
    {2.032714102998634, 2.0668455964405616, 1.1197462469252264},
    {1.3048039720619455, 1.5598334410550945, 0.65813438012464731},
    {0.96685673413841222, 0.93272524069648477, 1.8798245902118198},
    {1.6947668650751009, 1.4397373960819517, 2.3414364570123989},
    {2.3181866708784229, 1.2306509281779534, 1.5880238246046472},
    {1.5902765399417345, 0.72363877279248645, 1.1264119578040681},
  };

  printf("Slow 1:\n");
  SlowWithHisto(pts);
}

static void TestSlow2() {
  // Note a significant number of duplicate points here.
  std::vector<vec3> pts = {
    {-0.33170524968146076, 0.640672375452499, 0.30384276603487159},
    {0.32684868229124869, 1.3459424476880604, 0.56633246848456786},
    {1.0045458425298872, 0.94176898191989156, -0.04797231627087567},
    {0.34599191055717776, 0.23649890968433018, -0.31046201872057189},
    {-0.0045458425298871008, 0.058231018080108388, 1.0479723162708758},
    {0.65400808944282229, 0.76350109031566982, 1.310462018720572},
    {1.3317052496814608, 0.359327624547501, 0.69615723396512852},
    {0.67315131770875136, -0.34594244768806037, 0.43366753151543225},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
    {-0.29281948111007239, 0.67955814402388737, 0.34272853460625996},
    {0.36573445086263706, 1.3848282162594487, 0.60521823705595623},
    {1.0434316111012756, 0.98065475049127993, -0.0090865476994873018},
    {0.38487767912856613, 0.27538467825571855, -0.27157625014918352},
    {0.034339926041501267, 0.097116786651496756, 1.0868580848422642},
    {0.69289385801421066, 0.80238685888705819, 1.3493477872919604},
    {1.3705910182528491, 0.39821339311888937, 0.73504300253651689},
    {0.71203708628013973, -0.307056679116672, 0.47255330008682062},
  };

  printf("Slow 2:\n");
  SlowWithHisto(pts);
}

int main(int argc, char **argv) {
  ANSI::Init();

  TestRandom3();
  TestRandom();
  TestRandomCubes();

  TestSlow();
  TestSlow2();

  return 0;
}
